---
layout: post
title: '모놀리틱에서 마이크로 서비스 - 1' 
subtitle: '필요성에 관하여' 
categories: devlog 
tags: architecture 
comments: true
---
# 모놀리틱에서 마이크로 서비스 시리즈는 사실을 기반으로 한 소설입니다.
실제 모놀리틱한 사내 시스템을 마이크로 서비스화한 경험을 바탕으로 작성한 소설입니다.  
해당 시리즈에서는 swsz2의 녹차 공장(개인 프로젝트)을 구축할 예정이며  
시리즈에서 발생하는 모든 이슈는 실제 발생했던 이슈를 바탕으로 작성됩니다.   

## 모놀리틱? 마이크로 서비스?
<pre>
swsz2 : 저희 시스템은 모놀리틱 아키텍처로 구성되어 있는데 마이크로 서비스화할 필요가 있는 거 같아요.
 ???  : 이유가 있나요? 잘 돌아가고 있는 시스템을 뒤엎고 싶지 않은데...  
swsz2 : 우선 애플리케이션이 5개가 모여서 하나의 시스템을 이루고 있는데 각 애플리케이션은...
 ???  : (하암...)
swsz2 : 그림으로 보실까요?
 ???  : 그게 좋겠네요...
</pre>


### 현재 : 모놀리틱 아키텍처
모놀리식 아키텍처란, 마이크로서비스의 각광에 따라 마이크로서비스가 아닌 전통의 아키텍처를 지칭하는 의미로 생겨난 단어이다. 위의 그림에서 처럼 모든 모듈은 서비스 내부의 Product 형태로 종속되어 있으며, 서비스에만 집중할 수 있는 구조로 되어 있다.  
이는 Monolithic 이라는 단어의 뜻 그대로 하나의 Massive 한 Context 형태의 아키텍처를 의미하며  
하나의 서비스 또는 어플리케이션이 하나의 거대한 아키텍처를 가질 때, Monolithic 하다고 한다.  

출처: https://jins-dev.tistory.com/entry/전통의-소프트웨어-아키텍처-모델-모놀리식Monolithic-아키텍처 [Jins' Dev Inside]

![monolithic-to-microservices-steps-1-before](/assets/img/post/monolithic-to-microservices-steps-1-before.PNG)

### 미래 예측 : 마이크로 서비스 아키텍처
마이크로서비스 아키텍처는 하나의 큰 애플리케이션을 여러 개의 작은 애플리케이션으로 쪼개어 변경과 조합이 가능하도록 만든 아키텍처를 말합니다.

출처: http://guruble.com/마이크로서비스microservice-아키텍처-그것이-뭣이-중헌디/ [guruble]

![monolithic-to-microservices-steps-1-after](/assets/img/post/monolithic-to-microservices-steps-1-after.PNG)

### 비교

 | | 모놀리틱 아키텍처 | 마이크로 서비스 아키텍처 |
 |:---:|:-----:|:-----:|
 |관리|하나의 애플리케이션을 관리|서비스 단위의 애플리케이션을 관리|
 |배포| 기능의 scope와 관계없이 애플리케이션 전체를 교체 | 서비스 단위로 애플리케이션 교체 |
 |개발 속도|기능을 개발하기 위해 전체 시스템의 이해가 필요해 비교적 느림| 서비스와 맞닿은 요소만 이해가 필요해 비교적 빠름 |
 |유연성| 시간의 흐름에 따라 새로운 기술을 적용하기 어려움 | 시간이 흐르더라도 새로운 기술을 적용하기 용이함|
 |확장성| 시스템이 커질 수록 확장에 불편 |시스템이 커지더라도 확장에 영향 적음|

### 현재의 상황과 미래 예측 
<pre>
swsz2 :
1. 녹차 공장 애플리케이션을 증설하려고 하면 필요하지 않는 기능이 포함된 대형 애플리케이션이 하나씩 추가됐습니다.
   하지만 마이크로 서비스화 한다면 작은 서비스 애플리케이션만 추가하면 됩니다.

2. 하나의 애플리케이션이 요청, 스케줄링, 데이터베이스 연동 등 너무 많은 역할을 소화해서 모니터링 및 장애 조치가 어렵습니다.
   하지만 마이크로 서비스화 한다면 애플리케이션 별 역할을 명확히 할 수 있습니다. 이는 시스템 장애 시 빠르게 대처할 수 있는 구조입니다.

3. 여러 서버에서 데이터베이스를 조회하기 때문에 접근 이력 관리가 어렵습니다. 
   데이터베이스 연결을 담당하는 서버를 두고 각 애플리케이션은 해당 서버와 통신한다면 보안, 속도상 이점을 챙길 수 있습니다. 

4. 각 애플리케이션 간 통신에 메시지 큐를 두고 grafana와 prometheus를 활용하여 모니터링한다면 시스템 관리기를 제거할 수 있습니다.

5. 마이크로 서비스는 서버와 서버의 통신이기 때문에 불필요한 presentaion layer를 제거하여 인력을 줄일 수 있고
   이를 gRPC로 대체하여 보안, 속도, 생산성의 이점을 챙길 수 있습니다.

6. 공장에서 하는 일이 너무 많아서 하나의 작업이 추가돼도 전체에 대해서 테스트를 해야 합니다... 비효율적입니다...
</pre>

###  대화의 끝
<pre>
 ???  : 그런데 너무 이상적인 거 아닐까요? 지금도 잘 돌아가잖아요...
swsz2 : 지금을 위해 하는 작업이 아니라 미래를 위해 하는 작업이라고 생각합니다. 시스템이 더 커지기 전에 개편해야 합니다.
 ???  : 오케이 그럼 해봅시다.
swsz2 : 잘해보겠습니다! 
</pre>

## 다음 이야기
쉽지 않은 시스템 설계

P.S  
혹시나 설명이 필요한 부분이 더 있다면 댓글로 남겨주세요.  
설명을 추가하고 다음 포스팅부터는 설명까지 넣을 수 있도록 하겠습니다.
 
두서없는 글을 읽어주셔서 감사합니다.  
